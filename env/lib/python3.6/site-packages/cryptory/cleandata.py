bitcoin_market_info = pd.read_csv("bitcoin_market_info.csv").iloc[:, 1:]
txs_data = pd.read_csv("txs_data.csv").iloc[:, 1:]
avg_block_size = pd.read_csv("avg_block_size.csv").iloc[:, 1:]
btc_google_trends = pd.read_csv("btc_google_trends.csv").iloc[:, 1:]
bch_accounts = pd.read_csv("bch_accounts.csv")
s_and_p_stock = pd.read_csv('s_and_p_stock.csv').iloc[:, 1:]
dow_jones_stock = pd.read_csv('dow_jones_stock.csv').iloc[:, 1:]
bchain_mirev_data = pd.read_csv('bchain_mirev_data.csv').iloc[:, 1:]

bch_accounts.rename(columns={'Value': 'btc_Accounts'}, inplace=True)
s_and_p_stock.rename(columns={'date': 'Date'}, inplace=True)
dow_jones_stock.rename(columns={'date': 'Date'}, inplace=True)
bchain_mirev_data.rename(columns={'date': 'Date'}, inplace=True)

bitcoin_market_info.columns =[bitcoin_market_info.columns[0]]+['btc_'+i for i in bitcoin_market_info.columns[1:]]
btc_google_trends.columns =[btc_google_trends.columns[0]]+['btc_google_trends_'+i for i in btc_google_trends.columns[1:]]
avg_block_size.columns =[avg_block_size.columns[0]]+['btc_'+i for i in avg_block_size.columns[1:]]
txs_data.columns =[txs_data.columns[0]]+['btc_'+i for i in txs_data.columns[1:]]
bchain_mirev_data.columns =[bchain_mirev_data.columns[0]]+['btc_'+i for i in bchain_mirev_data.columns[1:]]

from sklearn.preprocessing import minmax_scale, Imputer
# model_data.fillna(model_data.mean(),inplace=True)
mean_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)
without_date = btc_google_trends.loc[:, btc_google_trends.columns != 'Date']
# Train the imputor on the df dataset
mean_imputer = mean_imputer.fit(without_date)
# Apply the imputer to the df dataset
imputed_df = mean_imputer.transform(without_date)
# Get back columns
imputed_df = pd.DataFrame(imputed_df, columns = without_date.columns)
imputed_df[['btc_google_trends_bitcoin']] = minmax_scale(imputed_df[['btc_google_trends_bitcoin']])
# Re add date column
imputed_df['Date'] = btc_google_trends['Date']
# Order by date
# imputed_df["Date"] = imputed_df["Date"].values[::-1]
btc_google_trends=imputed_df
# model_data.to_csv('model_data.csv')

mean_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)
without_date = bitcoin_market_info.loc[:, bitcoin_market_info.columns != 'Date']
# Train the imputor on the df dataset
mean_imputer = mean_imputer.fit(without_date)
# Apply the imputer to the df dataset
imputed_df = mean_imputer.transform(without_date)
# Get back columns
imputed_df = pd.DataFrame(imputed_df, columns = without_date.columns)
imputed_df[['btc_Open', 'btc_High','btc_Close', 'btc_Volume', 'btc_Market Cap']] = minmax_scale(imputed_df[['btc_Open', 'btc_High', 'btc_Close', 'btc_Volume', 'btc_Market Cap']])
# Re add date column
imputed_df['Date'] = bitcoin_market_info['Date']
# Order by date
# imputed_df["Date"] = imputed_df["Date"].values[::-1]
bitcoin_market_info=imputed_df
# model_data.to_csv('model_data.csv')

mean_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)
without_date = avg_block_size.loc[:, avg_block_size.columns != 'Date']
# Train the imputor on the df dataset
mean_imputer = mean_imputer.fit(without_date)
# Apply the imputer to the df dataset
imputed_df = mean_imputer.transform(without_date)
# Get back columns
imputed_df = pd.DataFrame(imputed_df, columns = without_date.columns)
imputed_df[['btc_avg_block_size']] = minmax_scale(imputed_df[['btc_avg_block_size']])
# Re add date column
imputed_df['Date'] = avg_block_size['Date']
# Order by date
# imputed_df["Date"] = imputed_df["Date"].values[::-1]
avg_block_size=imputed_df
# model_data.to_csv('model_data.csv')

mean_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)
without_date = txs_data.loc[:, txs_data.columns != 'Date']
# Train the imputor on the df dataset
mean_imputer = mean_imputer.fit(without_date)
# Apply the imputer to the df dataset
imputed_df = mean_imputer.transform(without_date)
# Get back columns
imputed_df = pd.DataFrame(imputed_df, columns = without_date.columns)
imputed_df[['btc_transactions']] = minmax_scale(imputed_df[['btc_transactions']])
# Re add date column
imputed_df['Date'] = txs_data['Date']
# Order by date
# imputed_df["Date"] = imputed_df["Date"].values[::-1]
txs_data=imputed_df
# model_data.to_csv('model_data.csv')

mean_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)
without_date = bchain_mirev_data.loc[:, bchain_mirev_data.columns != 'Date']
# Train the imputor on the df dataset
mean_imputer = mean_imputer.fit(without_date)
# Apply the imputer to the df dataset
imputed_df = mean_imputer.transform(without_date)
# Get back columns
imputed_df = pd.DataFrame(imputed_df, columns = without_date.columns)
imputed_df[['btc_mining_revenue']] = minmax_scale(imputed_df[['btc_mining_revenue']])
# Re add date column
imputed_df['Date'] = bchain_mirev_data['Date']
# Order by date
# imputed_df["Date"] = imputed_df["Date"].values[::-1]
bchain_mirev_data=imputed_df

mean_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)
without_date = dow_jones_stock.loc[:, dow_jones_stock.columns != 'Date']
# Train the imputor on the df dataset
mean_imputer = mean_imputer.fit(without_date)
# Apply the imputer to the df dataset
imputed_df = mean_imputer.transform(without_date)
# Get back columns
imputed_df = pd.DataFrame(imputed_df, columns = without_date.columns)
imputed_df[['dj_close']] = minmax_scale(imputed_df[['dj_close']])
# Re add date column
imputed_df['Date'] = dow_jones_stock['Date']
# Order by date
# imputed_df["Date"] = imputed_df["Date"].values[::-1]
dow_jones_stock=imputed_df

mean_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)
without_date = s_and_p_stock.loc[:, s_and_p_stock.columns != 'Date']
# Train the imputor on the df dataset
mean_imputer = mean_imputer.fit(without_date)
# Apply the imputer to the df dataset
imputed_df = mean_imputer.transform(without_date)
# Get back columns
imputed_df = pd.DataFrame(imputed_df, columns = without_date.columns)
imputed_df[['sp_close']] = minmax_scale(imputed_df[['sp_close']])
# Re add date column
imputed_df['Date'] = s_and_p_stock['Date']
# Order by date
# imputed_df["Date"] = imputed_df["Date"].values[::-1]
s_and_p_stock=imputed_df
